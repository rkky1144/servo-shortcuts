<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="e/W:qg#=;#{$7Fm[-S5Z" x="0" y="0"><statement name="HANDLER"><block type="SuperBit_Servo" id="kyK=1irvDAA@Hd,2K^RS"><field name="num">SuperBit.enServo.S4</field><value name="value"><shadow type="math_number_minmax" id="IQ1ZpgDXRsJ#T#9$wX?P"><mutation min="0" max="180" precision="0"></mutation><field name="SLIDER">90</field></shadow></value><next><block type="SuperBit_Servo" id="d=4Pflvbjy|./OFiHn$e"><field name="num">SuperBit.enServo.S1</field><value name="value"><shadow type="math_number_minmax" id="l_wRb17)Lil7`W$#y^j("><mutation min="0" max="180" precision="0"></mutation><field name="SLIDER">0.68</field></shadow></value><next><block type="SuperBit_Servo" id="7#bdqg5nY+1L7U3qQRf?"><field name="num">SuperBit.enServo.S2</field><value name="value"><shadow type="math_number_minmax" id="37[v--^J+uap,hza9$PS"><mutation min="0" max="180" precision="0"></mutation><field name="SLIDER">90.72</field></shadow></value><next><block type="SuperBit_Servo" id="l`d_}TZ!hAsLjmI]8bCq"><field name="num">SuperBit.enServo.S3</field><value name="value"><shadow type="math_number_minmax" id="FEJ.^i;!cIwJY|w{n]Zy"><mutation min="0" max="180" precision="0"></mutation><field name="SLIDER">10</field></shadow></value><next><block type="typescript_statement" id="*xyFG!`#6KTeopeYS6wo"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace servoCalculation {" line1="" line2="    //%block = &quot;clamp open $open $t3&quot;" line3="    export function clampOpen(open: boolean, t3 : number) {" line4="        if (open) {" line5="            SuperBit.Servo(SuperBit.enServo.S3, 135 + t3)" line6="        } else {" line7="            SuperBit.Servo(SuperBit.enServo.S3, 10 + t3)" line8="        }" line9="    }" line10="" line11="    //%block = &quot;clamp at $first_x $first_y&quot; &quot;$forward $t1 $t2&quot;" line12="    export function clampAt(first_x: number, first_y: number, forward: boolean, t1: number, t2: number) {" line13="        if (forward) {" line14="            for (let index = 0; index &lt;= 100; index++) {" line15="                let x = Math.map(index, 0, 100, 81, first_x)" line16="                let y = Math.map(index, 0, 100, 81, first_y)" line17="                SuperBit.Servo(SuperBit.enServo.S1, 90 - Math.atan2(y, x) - Math.acos(Math.sqrt(x ** 2 + y ** 2) / 160) + t1)" line18="                SuperBit.Servo(SuperBit.enServo.S2, 90 + Math.atan2(y, x) - Math.acos(Math.sqrt(x ** 2 + y ** 2) / 160) + t2)" line19="                basic.pause(10)" line20="            }" line21="        } else {" line22="            for (let index2 = 100; index2 &gt;= 0; index2--) {" line23="                let x2 = Math.map(index2, 0, 100, 81, first_x)" line24="                let y2 = Math.map(index2, 0, 100, 81, first_y)" line25="                SuperBit.Servo(SuperBit.enServo.S1, 90 - Math.atan2(y2, x2) - Math.acos(Math.sqrt(x2 ** 2 + y2 ** 2) / 160) + t1)" line26="                SuperBit.Servo(SuperBit.enServo.S2, 90 + Math.atan2(y2, x2) - Math.acos(Math.sqrt(x2 ** 2 + y2 ** 2) / 160) + t2)" line27="                basic.pause(10)" line28="            }" line29="        }" line30="    }" line31="" line32="    //%block = &quot;servo2 at $x $y&quot;" line33="    export function servo2At(x: number, y: number) {" line34="        x |= 0" line35="        y |= 0" line36="        return 90 + Math.atan2(y, x) - Math.acos(Math.sqrt(x ** 2 + y ** 2) / 160)" line37="    }" line38="" line39="    //%block = &quot;servo1 at $x $y&quot;" line40="    export function servo1At(x: number, y: number) {" line41="        x |= 0" line42="        y |= 0" line43="        return 90 - Math.atan2(y, x) - Math.acos(Math.sqrt(x ** 2 + y ** 2) / 160)" line44="    }" line45="" line46="}" numlines="47"></mutation></block></next></block></next></block></next></block></next></block></statement></block></xml>